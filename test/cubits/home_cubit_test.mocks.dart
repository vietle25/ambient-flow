// Mocks generated by Mockito 5.4.4 from annotations
// in ambientflow/test/cubits/home_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:ambientflow/models/sound_bookmark.dart' as _i4;
import 'package:ambientflow/models/sound_bookmark_item.dart' as _i5;
import 'package:ambientflow/services/audio/audio_coordinator_service.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [AudioCoordinatorService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAudioCoordinatorService extends _i1.Mock
    implements _i2.AudioCoordinatorService {
  MockAudioCoordinatorService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> applyBookmark(_i4.SoundBookmark? bookmark) =>
      (super.noSuchMethod(
        Invocation.method(
          #applyBookmark,
          [bookmark],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  List<_i5.SoundBookmarkItem> getCurrentSoundState() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentSoundState,
          [],
        ),
        returnValue: <_i5.SoundBookmarkItem>[],
      ) as List<_i5.SoundBookmarkItem>);

  @override
  _i3.Future<void> stopAllSounds() => (super.noSuchMethod(
        Invocation.method(
          #stopAllSounds,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  double getCurrentGlobalVolume() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentGlobalVolume,
          [],
        ),
        returnValue: 0.0,
      ) as double);

  @override
  bool hasActiveSounds() => (super.noSuchMethod(
        Invocation.method(
          #hasActiveSounds,
          [],
        ),
        returnValue: false,
      ) as bool);

  @override
  Set<String> getActiveSoundIds() => (super.noSuchMethod(
        Invocation.method(
          #getActiveSoundIds,
          [],
        ),
        returnValue: <String>{},
      ) as Set<String>);

  @override
  _i3.Future<void> preloadAllSounds() => (super.noSuchMethod(
        Invocation.method(
          #preloadAllSounds,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> setGlobalVolume(double? volume) => (super.noSuchMethod(
        Invocation.method(
          #setGlobalVolume,
          [volume],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> setMuted(bool? muted) => (super.noSuchMethod(
        Invocation.method(
          #setMuted,
          [muted],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
